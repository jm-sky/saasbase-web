name: Build & Deploy Vue App

on:
  workflow_dispatch:
    inputs:
      server:
        description: 'Server to deploy to'
        required: true
        type: choice
        options:
          - 'STAGING_MADEYSKI'
          - 'STAGING_OVH'
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    name: Build App
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - server: STAGING_MADEYSKI
            env_file_content: ${{ vars.ENV_STAGING_MADEYSKI }}
          - server: STAGING_OVH
            env_file_content: ${{ vars.ENV_STAGING_OVH }}
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.server == matrix.server)

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Generate version.json
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "{ \"commit\": \"$COMMIT_HASH\", \"buildDate\": \"$BUILD_DATE\" }" > public/version.json

      - name: Setup environment file
        run: |
          cp .env.production .env
          echo "${{ matrix.env_file_content }}" >> .env

      - name: Build app
        run: pnpm build

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.server }}
          path: dist

  deploy:
    name: Deploy App
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - server: STAGING_MADEYSKI
          - server: STAGING_OVH
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.server == matrix.server)

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.server }}
          path: dist

      - name: Set SSH variables
        id: vars
        run: |
          if [ "${{ matrix.server }}" = "STAGING_MADEYSKI" ]; then
            echo "username=${{ secrets.SSH_USER_STAGING_MADEYSKI }}" >> "$GITHUB_OUTPUT"
            echo "host=${{ vars.SSH_HOST_STAGING_MADEYSKI }}" >> "$GITHUB_OUTPUT"
            echo "port=${{ vars.SSH_PORT_STAGING_MADEYSKI }}" >> "$GITHUB_OUTPUT"
            echo "target=${{ secrets.SSH_TARGET_STAGING_MADEYSKI }}" >> "$GITHUB_OUTPUT"
            echo "ssh_key=${{ secrets.SSH_KEY_STAGING_MADEYSKI }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ matrix.server }}" = "STAGING_OVH" ]; then
            echo "username=${{ secrets.SSH_USER_STAGING_OVH }}" >> "$GITHUB_OUTPUT"
            echo "host=${{ vars.SSH_HOST_STAGING_OVH }}" >> "$GITHUB_OUTPUT"
            echo "port=${{ vars.SSH_PORT_STAGING_OVH }}" >> "$GITHUB_OUTPUT"
            echo "target=${{ secrets.SSH_TARGET_STAGING_OVH }}" >> "$GITHUB_OUTPUT"
            echo "ssh_key=${{ secrets.SSH_KEY_STAGING_OVH }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Write SSH key to file
        run: |
          echo "${{ steps.vars.outputs.ssh_key }}" > id_rsa
          chmod 600 id_rsa

      - name: Deploy via SCP
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ steps.vars.outputs.host }}
          port: ${{ steps.vars.outputs.port }}
          username: ${{ steps.vars.outputs.username }}
          key_path: id_rsa
          source: 'dist/*'
          target: ${{ steps.vars.outputs.target }}
          strip_components: 1
